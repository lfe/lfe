#! /bin/sh
# Copyright (c) 2008-2014 Robert Virding
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Follow symlinks to actual program and set env variables.  We have to
# cd to each directory following symlinks to handle relative symlinks.

follow_symlink () {
    cd "$(dirname "$1")" > /dev/null
    filename="$(basename "$1")"
    if [ -h "$filename" ]; then
        follow_symlink "$(readlink "$filename")"
    else
        echo "$(pwd -P)/$filename"
    fi
}

show_help () {
    echo "Usage: `basename $0` [flags] file [args]

    -h | --help              Print this help and exit
    -e | -eval \"sexp\"        Evaluates the given sexpr
    -- | -extra \"switches\"   Send misc configuration switches to the Erlang VM
    -flag | +flag            Enables/disables configuration flags to be
                             used by the Erlang VM" >&2
}

SELF=$(follow_symlink "$0")
LFE_PROGNAME=$(echo "$0" | sed 's/.*\///') # Basically basename
LFE_BINDIR=$(dirname "$SELF")
LFE_ROOTDIR=$(dirname "$LFE_BINDIR")

export LFE_ROOTDIR
export LFE_BINDIR
export LFE_PROGNAME

i="$#"                          # Counter
e=""                            # Eval flag/value

# First step over the flag section adding them to the end.
while [ "$i" -gt 0 ]; do
    case "$1" in
        -e | -eval)         # We are going to eval
            e="-lfe_eval"
            break ;;        # delay removing this
        -h | --help)
            $(show_help)    # Show help
            exit 1 ;;
        -extra | --)        # We are explicitly done
            shift ; i=`expr $i - 1`
            break ;;
        -* | +*)  # Flags
                if [ "$1" = "-erl_eval" ]; then
                        set -- "$@" "-eval"
                else
                        set -- "$@" "$1"
                fi

            shift ; i=`expr $i - 1`

            while [ "$i" -gt 0 ]; do
                case "$1" in
                    -* | +*)
                        break ;;
                    *)
                        set -- "$@" "$1"
                        shift ; i=`expr $i - 1`
                esac
            done ;;
            *)  # Plain argument
            break ;;
    esac
done

# Add the middle bit to the end, a -noshell flag if there are
# more arguments.
if [ "$i" -gt 0 ]; then
    set -- "$@" "-noshell"
fi

set -- "$@" "-user" "lfe_init" "-extra"

# Check if we are 'eval'ing and add -lfe_eval flag
if [ "$e" != "" ]; then
    shift ; i=`expr $i - 1`     # Now we remove it as it has -noshell'ed
    set -- "$@" "-lfe_eval"
fi

# Step over the arg section adding them to the end.
while [ "$i" -gt 0 ]; do
    set -- "$@" "$1"
    shift ; i=`expr $i - 1`
done

# The order of precedence for LFE libraries is as follows:
# 1) The LFE_ROOTDIR for the current bin/lfe being executed is unusurpable;
#    allowing anything else would leave LFE open to instabilities where it
#    could be executed with libraries of a different release.
# 2) A user/developer should be allowed to override anything else by updating
#    ERL_LIBS as they see fit.
# 3) A project's libraries (current directory) should be loaded automatically,
#    if they exist, but not override the previous two.
# 4) If a default library is installed in ~/.lfe/libs, then that will be added
#    last, in the event that the sought library is not picked up in any of the
#    other locations.
#
# Note that ERL_LIBS will find *either* an ebin subdir *or* lib subdir
#
# The following works for rebar and erl.mk
PROJ_LIBS=$(find ./deps -maxdepth 1 -mindepth 1 -exec printf "%s:" {} \;)
# The following works for rebar3
R3_PROJ_LIBS=$(find ./_build/default/deps -maxdepth 1 -mindepth 1 -exec printf "%s:" {} \;)
LFE_HOME_LIBS=$(find "$HOME"/.lfe/libs -maxdepth 1 -mindepth 1 -exec printf "%s:" {} \;)
ALL_LIBS="$LFE_ROOTDIR":"$ERL_LIBS":"$PROJ_LIBS":"$R3_PROJ_LIBS":"$LFE_HOME_LIBS"
ERL_LIBS="$ALL_LIBS" exec erl "$@"
