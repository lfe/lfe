#! /bin/sh
# -*- mode: shell-script; indent-tabs-mode: nil -*-
# Copyright (c) 2008-2024 Robert Virding
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Follow symlinks to actual program and set env variables.  We have to
# cd to each directory following symlinks to handle relative symlinks.

follow_symlink () {
    cd "$(dirname "$1")" > /dev/null
    filename="$(basename "$1")"
    if [ -h "$filename" ]; then
        follow_symlink "$(readlink "$filename")"
    else
        echo "$(pwd -P)/$filename"
    fi
}

show_help () {
    echo "Usage: `basename $0` [flags] file [args]

    -h | -help               Print this help and exit
    -e | -eval \"sexp\"        Evaluates the given sexpr
    -- | -extra \"switches\"   Send misc configuration switches to the Erlang VM
    -repl \"repl\"             Sets which repl to use
    -prompt value            Set the LFE prompt to a user-supplied value
    -flag | +flag            Enables/disables configuration flags to be
                             used by the Erlang VM

    Note that all flags accept being prefixed by either - or --" >&2
}

SELF=$(follow_symlink "$0")
LFE_PROGNAME=$(echo "$0" | sed 's/.*\///') # Basically basename
LFE_BINDIR=$(dirname "$SELF")
LFE_ROOTDIR=$(dirname "$LFE_BINDIR")

export LFE_ROOTDIR
export LFE_BINDIR
export LFE_PROGNAME

i="$#"                          # Counter

# First step over the flag section adding them to the end.
while [ "$i" -gt 0 ]; do
    s=0                         # count to be shifted
    case "$1" in
        # Handle the -- flags here
        --)                     # We are explicitly done
            shift 1 ; i=`expr $i - 1`
            break
            ;;
        # Any special handling of -- flags must come before this
        --*)                    # Remove the extra -, replace and loop
            # Repl="$(echo "$1" | cut -c 2-)"
            Repl=$(echo "$1" | sed 's/^-//')
            shift 1
            set -- "$Repl" "$@"
            s=0
            ;;
        # Handle the specific single - flags first
        -extra)                 # We are explicitly done
            shift 1 ; i=`expr $i - 1`
            break
            ;;
        -e | -eval | -lfe_eval | -lfe-eval) # We are going to eval
            shift 1
            set -- "-lfe_eval" "$@"
            break
            ;;
        -h | -help)            $(show_help)        # Show help
            exit 1 ;;
        -erl_eval)              # The Erlang eval
            set -- "$@" "-eval"
            s=1
            ;;
        -*)                     # The standard single - stuff
            set -- "$@" "$1"
            s=1
            ;;
        *)                      # Plain argument
            set -- "$@" "$1"
            s=1
            ;;
    esac
    shift $s ; i=`expr $i - $s`
done

# Add the middle bit to the end, a -noshell flag if there are
# more arguments.
if [ "$i" -gt 0 ]; then
    set -- "$@" "-noshell"
fi

set -- "$@" "-user" "lfe_init" "-extra"

# Collect everything after a -extra.
 while [ "$i" -gt 0 ]; do
     set -- "$@" "$1"
     shift ; i=`expr $i - 1`
 done

# The order of precedence for LFE libraries is as follows:
# 1) The LFE_ROOTDIR for the current bin/lfe being executed is unusurpable;
#    allowing anything else would leave LFE open to instabilities where it
#    could be executed with libraries of a different release.
# 2) A user/developer should be allowed to override anything else by updating
#    ERL_LIBS as they see fit.
# 3) A project's libraries (current directory) should be loaded automatically,
#    if they exist, but not override the previous two.
# 4) If a default library is installed in ~/.lfe/libs, then that will be added
#    last, in the event that the sought library is not picked up in any of the
#    other locations.
#
# Note that ERL_LIBS will find *either* an ebin subdir *or* lib subdir

# Find application ebin directories in lib if lib exists.

find_libs () {
    if [ -d "$1" ]; then
        echo $(find "$1" -maxdepth 1 -mindepth 1 -exec printf "%s:" {} \;)
    fi
}

# The following works for rebar and erl.mk
PROJ_LIBS=$(find_libs "./deps")
# The following works for rebar3
if [ -d "$REBAR_DEPS_DIR" ]; then
    # Use $REBAR_DEPS_DIR if set...
    R3_PROJ_LIBS=$(find_libs "$REBAR_DEPS_DIR")
else
    # ... otherwise provide a sensible default
    R3_PROJ_LIBS=$(find_libs "./_build/${REBAR_PROFILE:-default}/deps"):$(find_libs "./_build/${REBAR_PROFILE:-default}/lib")
fi
LFE_HOME_LIBS=$(find_libs "$HOME"/.lfe/lib)
ALL_LIBS="$LFE_ROOTDIR":"$ERL_LIBS":"$PROJ_LIBS""$R3_PROJ_LIBS""$LFE_HOME_LIBS"
## ERL_LIBS="$ALL_LIBS" exec erl "$@"

if [ -n "$LFE_CLI_DRY_RUN" ]; then
    echo "ERL_LIBS=$ALL_LIBS" exec erl "$@"
else
    ERL_LIBS="$ALL_LIBS" exec erl "$@"
fi
