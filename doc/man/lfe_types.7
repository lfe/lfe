.\"t
.\" Automatically generated by Pandoc 1.19.2.1
.\"
.TH "lfe_types" "7" "2016" "" ""
.hy
.SH NAME
.PP
lfe_types \- LFE Types and Functions Specifications
.SH TYPES
.PP
This is a description of the type syntax.
.PP
.TS
tab(@);
l l.
T{
LFE type
T}@T{
Erlang type
T}
_
T{
\f[C](none)\f[]
T}@T{
\f[C]none()\f[]
T}
T{
\f[C](any)\f[]
T}@T{
\f[C]any()\f[]
T}
T{
\f[C](atom)\f[]
T}@T{
\f[C]atom()\f[]
T}
T{
\f[C](integer)\f[]
T}@T{
\f[C]integer()\f[]
T}
T{
\f[C](range\ i1\ i2)\f[]
T}@T{
\f[C]I1..I2\f[]
T}
T{
\f[C](float)\f[]
T}@T{
\f[C]float()\f[]
T}
T{
\f[C](bitstring\ m\ n)\f[]
T}@T{
\f[C]<<_:M,_:_*N>>\f[]
T}
T{
\f[C](binary)\f[]
T}@T{
\f[C]<<_:0,_:_*8>>\f[]
T}
T{
\f[C](bitstring)\f[]
T}@T{
\f[C]<<_:0,_:_*1>>\f[]
T}
T{
\f[C]\&...\f[]
T}@T{
\f[C]\&...\f[]
T}
T{
\f[C](lambda\ any\ <type>)\f[]
T}@T{
\f[C]fun((...)\ \->\ <type>)\f[]
T}
T{
\f[C](lambda\ ()\ <type>)\f[]
T}@T{
\f[C]fun(()\ \->\ <type>)\f[]
T}
T{
\f[C](lambda\ (<tlist>)\ <type>)\f[]
T}@T{
\f[C]fun((<tlist>)\ \->\ <type>)\f[]
T}
T{
\f[C](map)\f[]
T}@T{
\f[C]map()\f[]
T}
T{
\f[C](map\ <pairlist>)\f[]
T}@T{
\f[C]#{<pairlist>}\f[]
T}
T{
\f[C](tuple)\f[]
T}@T{
\f[C]tuple()\f[]
T}
T{
\f[C](tuple\ <tlist>)\f[]
T}@T{
\f[C]{<tlist>}\f[]
T}
T{
\f[C](UNION\ <tlist>)\f[]
T}@T{
\f[C]<type>\ |\ <type>\f[]
T}
.TE
.PP
Apart from the predefined types in the Erlang type system we also have
the following predefined types which cannot be redefined:
\f[C]UNION\f[], \f[C]call\f[], \f[C]lambda\f[] and \f[C]range\f[].
The usage of \f[C]bitstring\f[], \f[C]tuple\f[] and \f[C]map\f[] have
also been extended.
.PP
The general form of bitstrings is \f[C](bitstring\ m\ n)\f[] which
denotes a bitstring which starts with \f[C]m\f[] bits and continues with
segments of \f[C]n\f[] bits.
\f[C](binary)\f[] is a short form for a sequence of bytes while
\f[C](bitstring)\f[] is a short form for a sequence of bits.
There is currently no short form for an empty binary,
\f[C](bitstring\ 0\ 0)\f[] must be used.
.SS Type Declarations of User\-Defined Types
.PP
\f[B](deftype (type\-name) type\-def)\f[]
.PP
\f[B](defopaque (type\-name) type\-def)\f[]
.PP
\f[B](deftype (type\-name par1 par2) type\-def)\f[]
.PP
\f[B](defopaque (type\-name par1 par2) type\-def)\f[]
.PP
For unparameterised types the parentheses around the type name are
optional.
An example:
.IP
.nf
\f[C]
(deftype\ foo\ (tuple\ \[aq]foo\ (integer)\ (list)))

(deftype\ bar\ (tuple\ \[aq]bar\ (integer)\ (list)))
\f[]
.fi
.SS Type Information in Record Declarations
.PP
\f[B](defrecord rec (field1 default1 type1) (field2 default2)
field3)\f[]
.PP
Fields with type annotations \f[I]MUST\f[] give a default value and
fields without type annotations get the default type \f[C](any)\f[].
.SH SPECIFICATIONS
.SS Type specifications of User\-Defined Functions
.PP
\f[B](defspec (func\-name arity) function\-spec ...)\f[]
.PP
where
.IP
.nf
\f[C]
function\-spec\ =\ (arg\-type\-list\ ret\-type)
function\-spec\ =\ (arg\-type\-list\ ret\-type\ constraint\-list)
arg\-type\-list\ =\ (arg\-type\ ...)
constraint\-list\ =\ (constraint\ ...)
constraint\ =\ (var\ var\-type)
\f[]
.fi
.PP
For multiple types add more function specs.
The parentheses around the function name and the arity are optional.
For example from the docs:
.IP
.nf
\f[C]
(defspec\ foo\ ([(pos_integer)]\ (pos_integer)))

(defspec\ (foo\ 1)
\ \ ([(pos_integer)]\ (pos_integer))
\ \ ([(integer)]\ (integer)))

(defspec\ (remove\-if\ 2)
\ \ ([(lambda\ ((any))\ (boolean))\ (list)]\ (list)))
\f[]
.fi
.PP
Or with constraints:
.IP
.nf
\f[C]
(defspec\ id\ ((X)\ X\ ((X\ (tuple)))))

(defspec\ (foo\ 1)
\ \ ([(tuple\ X\ (integer))]\ X\ ((X\ (atom))))
\ \ ([(list\ Y)]\ Y\ ((Y\ (number)))))

(defspec\ (remove\-if\ 2)
\ \ ([pred\ (list)]\ (list)\ [(pred\ (lambda\ ((any))\ (boolean)))]))
\f[]
.fi
.PP
Note that a constraint variable doesn\[aq]t need to start with an
upper\-case like an Erlang variable, though in some case it may be
easier to read.
.PP
Note we are using the alternate list form with \f[C][\ ]\f[] instead of
parentheses to make it easier to see the function arguments.
.SH AUTHORS
Robert Virding.
