.\" Automatically generated by Pandoc 1.19.2.1
.\"
.TH "lfe_io" "3" "2008\-2016" "" ""
.hy
.SH NAME
.PP
lfe_io \- Lisp Flavoured Erlang (LFE) io functions
.SH SYNOPSIS
.PP
This module provides a standard set of io functions for LFE.
In the following description, many functions have an optional parameter
IoDevice.
If included, it must be the pid of a process which handles the IO
protocols such as the IoDevice returned by file:open/2.
.PP
Two functions in this module are used to generate aesthetically
attractive representations of abstract forms, which are suitable for
printing.
These functions return (possibly deep) lists of characters and generate
an error if the form is wrong.
.SH DATA TYPES
.PP
\f[B]chars() = [char() | chars()]\f[]
.PP
\f[B]filesexpr() = {Sexpr,Line}\f[]
.PP
This is the format returned by \f[C]lfe_io:parse_file/1\f[] and is used
by the compiler to give better error information.
.SH EXPORTS
.PP
\f[B]read([[IoDevice,] Prompt]) \-> {ok,Sexpr} | {error,ErrorInfo}\f[]
.PP
Read an s\-expr from the standard input (IoDevice) with a prompt
(Prompt).
Note that this is not line\-oriented in that it stops as soon as it has
consumed enough characters.
.PP
\f[B]read_line([[IoDevice,] Prompt]) \-> {ok,Sexpr} |
{error,ErrorInfo}\f[]
.PP
Read an s\-expr from the standard input (IoDevice) with a prompt
(Prompt).
Note that this is line\-oriented in that it reads whole lines discarding
left\-over characters in the last line.
.PP
\f[B]read_string(String) \-> {ok,Sexpr} | {error,ErrorInfo}\f[]
.PP
Read an s\-expr from String.
.PP
\f[B]print([IoDevice,] Sexpr) \-> ok\f[]
.PP
Print the s\-expr Sexpr to the standard output (IoDevice).
.PP
\f[B]print1(Sexpr) \-> DeepCharList\f[]
.PP
Return the list of characters which represent the s\-expr Sexpr.
.PP
\f[B]prettyprint1(Sexpr) \-> DeepCharList\f[]
.PP
\f[B]prettyprint1(Sexpr, Depth) \-> DeepCharList\f[]
.PP
\f[B]prettyprint1(Sexpr, Depth, Indentation) \-> DeepCharList\f[]
.PP
\f[B]prettyprint1(Sexpr, Depth, Indentation, LineLength) \->
DeepCharList\f[]
.PP
Return the lost of characters which represents the prettyprinted s\-expr
\f[C]Sexpr\f[].
Assume we start at indentation Indentation or 0.
.PP
\f[B]format([IoDevice,] Format, Args) \-> ok\f[]
.PP
\f[B]fwrite([IoDevice,] Format, Args) \-> ok\f[]
.PP
\f[B]format1(Format, Args) \-> DeepCharList\f[]
.PP
\f[B]fwrite1(Format, Args) \-> DeepCharList\f[]
.PP
Print formatted output.
The following commands are valid in the format string:
.IP \[bu] 2
\f[B]~w, ~W\f[] \- print LFE terms
.IP \[bu] 2
\f[B]~p, ~P\f[] \- prettyprint LFE terms
.IP \[bu] 2
\f[B]~s\f[] \- print a string
.IP \[bu] 2
\f[B]~e, ~f, ~g\f[] \- print floats
.IP \[bu] 2
\f[B]~b, ~B\f[] \- based integers
.IP \[bu] 2
\f[B]~x, ~X\f[] \- based integers with a prefix
.IP \[bu] 2
\f[B]~+, ~#\f[] \- based integers in vanilla erlang format
.IP \[bu] 2
\f[B]~c, ~n, ~i\f[]
.PP
Currently they behave as for vanilla erlang except that \f[C]~w\f[],
\f[C]~W\f[], \f[C]~p\f[], \f[C]~P\f[] print the terms as LFE sexprs.
.PP
\f[B]read_file(FileName) \-> {ok,[Sexpr]} | {error,ErrorInfo}\f[]
.PP
Read the file Filename returning a list of s\-exprs (as it should be).
.PP
\f[B]parse_file(FileName) \-> {ok,[FileSexpr]} | {error,ErrorInfo}\f[]
.PP
where
.IP
.nf
\f[C]
FileSexpr\ =\ filesexpr()
\f[]
.fi
.PP
Read the file Filename returning a list of pairs containing s\-expr and
line number of the start of the s\-expr.
.PP
\f[B]scan_sexpr(Cont, Chars [,Line]) \->
{done,Ret,RestChars}|{more,Cont1}\f[]
.PP
This is a re\-entrant call which scans tokens from the input and returns
a parsed sepxr.
If there are enough characters to parse a sexpr or it detects and error
then it returns \f[C]{done,...}\f[] otherwise it returns
\f[C]{more,Cont}\f[] where \f[C]Cont\f[] is used in the next call to
\f[C]scan_sexpr\f[] with more characters to try and parse a sexpr.
This is continued until a sexpr has been parsed.
\f[C]Cont\f[] is initially \f[C][]\f[].
.PP
It is not designed to be called directly by an application but used
through the i/o system where it can typically be called in an
application by:
.PP
\f[C]io:request(In,\ {get_until,unicode,Prompt,Module,scan_sexpr,[Line]})\f[]
.SH ERROR INFORMATION
.PP
The \f[C]ErrorInfo\f[] mentioned above is the standard
\f[C]ErrorInfo\f[] structure which is returned from all IO modules.
It has the following format:
.PP
\f[B]{ErrorLine,Module,ErrorDescriptor}\f[]
.PP
A string describing the error is obtained with the following call:
.IP
.nf
\f[C]
apply(Module,\ format_error,\ ErrorDescriptor)
\f[]
.fi
.SH AUTHORS
Robert Virding.
