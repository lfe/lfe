.\" Automatically generated by Pandoc 1.19.2.1
.\"
.TH "lfe_clj" "3" "2015\-2016" "" ""
.hy
.SH NAME
.PP
clj \- LFE Clojure interface library.
.SH SYNOPSIS
.PP
This module provides Clojure\-inpired functions and macros for use in
LFE.
.SH EXPORTS
.PP
N.B.
Instead of making fully\-qualified calls to the macros exported from
\f[I]clj\f[], you may \f[C](include\-lib\ "lfe/include/clj.lfe")\f[] and
then call them directly, e.g.
.IP
.nf
\f[C]
(include\-lib\ "lfe/include/clj.lfe")

(\->\ 2\ (+\ 2)\ (=:=\ 4))\ ;\ \[aq]true
\f[]
.fi
.SS Function Macros
.PP
\f[B](defn name [arg ...] {{doc\-string}} ...)\f[]
.PP
\f[B](defn {{doc\-string}} ([argpat ...] ...))\f[]
.PP
Define and automatically export a function.
.PP
\f[B](defn\- name [arg ...] {{doc\-string}} ...)\f[]
.PP
\f[B](defn\- {{doc\-string}} ([argpat ...] ...))\f[]
.PP
Equivalent to \f[B]defun\f[].
.PP
\f[B](fn (arg ...) ...)\f[]
.PP
Equivalent to \f[C]lambda\f[].
.SS Threading Macros
.PP
Note: The original versions were copied from Tim Dysinger\[aq]s lfesl
repo here:
.IP
.nf
\f[C]
https://github.com/lfex/lfesl/blob/master/include/thread.lfe
\f[]
.fi
.PP
They have since been modified to be safely exportable.
.PP
\f[B](\-> ...)\f[]
.PP
Thread first.
.PP
Example usage, demonstrating ordering:
.IP
.nf
\f[C]
>\ (set\ o\ \[aq](#(a\ 1)\ #(b\ 2)\ #(c\ 3)))
(#(a\ 1)\ #(b\ 2)\ #(c\ 3))
>\ (clj:\->\ o
>\ \ \ \ \ \ \ \ \ (++\ \[aq](#(d\ 4)))
>\ \ \ \ \ \ \ \ \ (++\ \[aq](#(e\ 5)))
>\ \ \ \ \ \ \ \ \ (++\ \[aq](#(f\ 6))))
(#(a\ 1)\ #(b\ 2)\ #(c\ 3)\ #(d\ 4)\ #(e\ 5)\ #(f\ 6))
\f[]
.fi
.PP
Note that the use of \f[B]\->\f[] in this example results in each
successive value being \f[I]appended\f[] to the input list.
.PP
Another example showing how this works:
.IP
.nf
\f[C]
>\ (lists:sublist
>\ \ \ (lists:reverse
>\ \ \ \ \ (lists:sort
>\ \ \ \ \ \ \ (lists:merge
>\ \ \ \ \ \ \ \ \ (string:tokens
>\ \ \ \ \ \ \ \ \ \ \ (string:to_upper\ "a\ b\ c\ d\ e")
>\ \ \ \ \ \ \ \ \ \ \ "\ ")
>\ \ \ \ \ \ \ \ \ \[aq]("X"\ "F"\ "L"))))
>\ \ \ 2\ 3)
("L"\ "F"\ "E")
\f[]
.fi
.PP
Can be rewritten as this:
.IP
.nf
\f[C]
>\ (clj:\->\ "a\ b\ c\ d\ e"
>\ \ \ \ \ \ \ \ \ (string:to_upper)
>\ \ \ \ \ \ \ \ \ (string:tokens\ "\ ")
>\ \ \ \ \ \ \ \ \ (lists:merge\ \[aq]("X"\ "F"\ "L"))
>\ \ \ \ \ \ \ \ \ (lists:sort)
>\ \ \ \ \ \ \ \ \ (lists:reverse)
>\ \ \ \ \ \ \ \ \ (lists:sublist\ 2\ 3))
("L"\ "F"\ "E")
\f[]
.fi
.PP
\f[B](\->> ...)\f[]
.PP
Thread last.
.PP
Example usage, demonstrating ordering:
.IP
.nf
\f[C]
>\ (set\ o\ \[aq](#(a\ 1)\ #(b\ 2)\ #(c\ 3)))
(#(a\ 1)\ #(b\ 2)\ #(c\ 3))
>\ (clj:\->>\ o
>\ \ \ \ \ \ \ \ \ \ (++\ \[aq](#(d\ 4)))
>\ \ \ \ \ \ \ \ \ \ (++\ \[aq](#(e\ 5)))
>\ \ \ \ \ \ \ \ \ \ (++\ \[aq](#(f\ 6))))
(#(f\ 6)\ #(e\ 5)\ #(d\ 4)\ #(a\ 1)\ #(b\ 2)\ #(c\ 3))
\f[]
.fi
.PP
Note that the use of \f[B]\->>\f[] in this example results in each
successive value being \f[I]prepended\f[] to the input list.
.PP
Another example showing how this:
.IP
.nf
\f[C]
>\ (lists:foldl\ #\[aq]+/2\ 0
>\ \ \ (clj:take\ 10
>\ \ \ \ \ (lists:filter
>\ \ \ \ \ \ \ (clj:comp\ #\[aq]clj:even?/1\ #\[aq]clj:round/1)
>\ \ \ \ \ \ \ (lists:map
>\ \ \ \ \ \ \ \ \ (lambda\ (x)
>\ \ \ \ \ \ \ \ \ \ \ (math:pow\ x\ 2))
>\ \ \ \ \ \ \ \ \ (clj:seq\ 42)))))
1540.0
\f[]
.fi
.PP
Can be rewritten as this:
.IP
.nf
\f[C]
>\ (clj:\->>\ (clj:seq\ 42)
>\ \ \ \ \ \ \ \ \ \ (lists:map\ (lambda\ (x)\ (math:pow\ x\ 2)))
>\ \ \ \ \ \ \ \ \ \ (lists:filter\ (clj:comp\ #\[aq]clj:even?/1\ #\[aq]clj:round/1))
>\ \ \ \ \ \ \ \ \ \ (clj:take\ 10)
>\ \ \ \ \ \ \ \ \ \ (lists:foldl\ #\[aq]+/2\ 0))
1540.0
\f[]
.fi
.PP
\f[B](as\-> expr name . sexps)\f[]
.PP
Bind \f[C]name\f[] to \f[C]expr\f[], evaluate the first \f[C]sexp\f[] in
the lexical context of that binding, then bind \f[C]name\f[] to that
result, repeating for each successive \f[C]sexp\f[] in \f[C]sexps\f[],
returning the result of the last \f[C]sexp\f[].
.PP
\f[B](cond\-> expr . clauses)\f[]
.PP
Given an \f[C]expr\f[]ession and a set of \f[C]test\f[]/\f[C]sexp\f[]
pairs, thread \f[C]x\f[] (via \f[B]\->\f[]) through each \f[C]sexp\f[]
for which the corresponding \f[C]test\f[] expression is truthy, i.e.
neither \f[C]\[aq]false\f[] nor \f[C]\[aq]undefined\f[].
Note that, unlike \f[B]cond\f[] branching, \f[B]cond\->\f[] threading
does not short circuit after the first truthy test expression.
.PP
\f[B](cond\->> expr . clauses)\f[]
.PP
Given an \f[C]expr\f[]ession and a set of \f[C]test\f[]/\f[C]sexp\f[]
pairs, thread \f[C]x\f[] (via \f[B]\->>\f[]) through each \f[C]sexp\f[]
for which the corresponding \f[C]test\f[] expression is truthy, i.e.
neither \f[C]\[aq]false\f[] nor \f[C]\[aq]undefined\f[].
Note that, unlike \f[B]cond\f[] branching, \f[B]cond\->>\f[] threading
does not short circuit after the first truthy \f[C]test\f[] expression.
.PP
\f[B](some\-> x . sexps)\f[]
.PP
When \f[C]x\f[] is not \f[C]\[aq]undefined\f[], thread it into the first
\f[C]sexp\f[] (via \f[B]\->\f[]), and when that result is not
\f[C]\[aq]undefined\f[], through the next, etc.
.PP
\f[B](some\->> x . sexps)\f[]
.PP
When \f[C]x\f[] is not \f[C]\[aq]undefined\f[], thread it into the first
\f[C]sexp\f[] (via \f[B]\->>\f[]), and when that result is not
\f[C]\[aq]undefined\f[], through the next, etc.
.SS Conditional Macros
.PP
\f[B](if\-let ((patt test)) then {{else}})\f[]
.PP
If \f[C]test\f[] evaluates to anything other than \f[C]\[aq]false\f[] or
\f[C]\[aq]undefined\f[], evaluate \f[C]then\f[] with \f[C]patt\f[] bound
to the value of \f[C]test\f[], otherwise \f[C]else\f[], if supplied,
else \f[C]\[aq]undefined\f[].
.PP
\f[B](iff\-let ((patt test)) . body)\f[]
.PP
When \f[C]test\f[] evaluates to anything other than \f[C]\[aq]false\f[]
or \f[C]\[aq]undefined\f[], evaluate \f[C]body\f[] with \f[C]patt\f[]
bound to the value of \f[C]test\f[], otherwise return
\f[C]\[aq]undefined\f[].
.PP
\f[B](condp pred expr . clauses)\f[]
.PP
Given a binary predicate, an expression and a set of clauses of the
form:
.IP
.nf
\f[C]
test\-expr\ result\-expr

test\-expr\ >>\ result\-fn
\f[]
.fi
.PP
where \f[C]result\-fn\f[] is a unary function, if
\f[C](pred\ test\-expr\ expr)\f[] returns anything other than
\f[C]\[aq]undefined\f[] or \f[C]\[aq]false\f[], the clause is a match.
.PP
If a binary clause matches, return \f[C]result\-expr\f[].
If a ternary clause matches, call \f[C]result\-fn\f[] with the result of
the predicate and return the result.
.PP
If no clause matches and a single default expression is given after the
clauses, return it.
If no default expression is given and no clause matches, throw a
\f[C]no\-matching\-clause\f[] error.
.PP
\f[B](if\-not test then)\f[]
.PP
\f[B](if\-not test then else)\f[]
.PP
If \f[C]test\f[] evaluates to \f[C]\[aq]false\f[] or
\f[C]\[aq]undefined\f[], evaluate and return \f[C]then\f[], otherwise
\f[C]else\f[], if supplied, else \f[C]\[aq]undefined\f[].
.PP
\f[B](iff test . body)\f[]
.PP
Like Clojure\[aq]s \f[C]when\f[].
If \f[C]test\f[] evaluates to anything other than \f[C]\[aq]false\f[] or
\f[C]\[aq]undefined\f[], evaluate \f[C]body\f[] in an implicit
\f[C]progn\f[].
.PP
\f[B](when\-not test . body)\f[]
.PP
If \f[C]test\f[] evaluates to \f[C]\[aq]false\f[] or
\f[C]\[aq]undefined\f[], evaluate \f[C]body\f[] in an implicit
\f[C]progn\f[].
Otherwise return \f[C]\[aq]undefined\f[].
.PP
\f[B](not= x)\f[]
.PP
\f[B](not= x y)\f[]
.PP
\f[B](not= x y . more)\f[]
.PP
Same as \f[C](not\ (==\ ...))\f[].
.SS Predicate Macros
.PP
Allowed in guards, unless otherwise stated.
.PP
\f[B](tuple? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is a tuple.
.PP
\f[B](atom? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is an atom.
.PP
\f[B](binary? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is a binary.
.PP
\f[B](bitstring? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is a bitstring.
.PP
\f[B](boolean? x)\f[]
.PP
\f[B](bool? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is a boolean.
.PP
\f[B](float? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is a float.
.PP
\f[B](function? f)\f[]
.PP
\f[B](func? f)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is a function.
.PP
\f[B](function? f n)\f[]
.PP
\f[B](func? f n)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]f\f[] is an \f[C]n\f[]\-ary function.
.PP
\f[B](integer? x)\f[]
.PP
\f[B](int? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is an integer.
.PP
\f[B](number? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is a number.
.PP
\f[B](record? x record\-tag)\f[]
.PP
\f[B](record? x record\-tag size)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is a tuple and its first element
is \f[C]record\-tag\f[].
If \f[C]size\f[] is given, check that \f[C]x\f[] is a
\f[C]record\-tag\f[] record of size \f[C]size\f[].
.PP
N.B.
\f[B]record?/2\f[] may yield unexpected results, due to difference
between the Erlang and LFE compilers.
As such, whenever possible, prefer \f[B]record?/3\f[]."
.PP
\f[B](reference? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is a reference.
.PP
\f[B](map? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is a map.
Return \f[C]\[aq]false\f[] on versions of Erlang without maps.
.PP
\f[B](undefined? x)\f[]
.PP
\f[B](undef? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is the atom
\f[C]\[aq]undefined\f[].
.PP
\f[B](nil? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is the atom \f[C]\[aq]nil\f[] or
the empty list.
.PP
\f[B](true? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is the atom \f[C]\[aq]true\f[].
.PP
\f[B](false? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is the atom \f[C]\[aq]false\f[].
.PP
\f[B](falsy? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is one of the atoms
\f[C]\[aq]false\f[] and \f[C]\[aq]undefined\f[].
.PP
\f[B](odd? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is odd.
.PP
\f[B](even? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is even.
.PP
\f[B](zero? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is zero.
.PP
\f[B](pos? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is greater than zero.
.PP
\f[B](neg? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is less than zero.
.PP
\f[B](identical? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is exactly equal to \f[C]y\f[].
.SS Other Macros
.PP
\f[B](str x1, x2 ... xn)\f[]
.PP
Given arbitrary number of arguments, return a string consisting of each
of their string representations.
.PP
N.B.
Because Erlang characters are represented as integers, this will not
work for chars, e.g.
\f[C]#\\a\f[], which will be presented in the return value as its
integer value, i.e.
\f[C]"97"\f[].
.IP
.nf
\f[C]
>\ (clj:str\ #\\a\ "bc")
"97bc"
>\ (clj:str\ "a"\ "bc")
"abc"
\f[]
.fi
.PP
\f[B](lazy\-seq)\f[]
.PP
\f[B](lazy\-seq seq)\f[]
.PP
Return a (possibly infinite) lazy sequence from a given lazy sequence
\f[C]seq\f[] or a finite lazy sequence from given list \f[C]seq\f[].
A lazy sequence is treated as finite if at any iteration it produces the
empty list, instead of a cons cell with data as the head and a nullary
function for the next iteration as the tail.
.PP
\f[B](conj coll . xs)\f[]
.PP
conj[oin] a value onto an existing collection.
Prepend to a list, append to a tuple, and merge maps.
.SS Clojure\-inspired \f[I]if\f[] Macro
.PP
\f[B](if test then)\f[]
.PP
\f[B](if test then else)\f[]
.PP
If \f[C]test\f[] evaluates to anything other than \f[C]\[aq]false\f[] or
\f[C]\[aq]undefined\f[], return \f[C]then\f[], otherwise \f[C]else\f[],
if given, else \f[C]\[aq]undefined\f[].
.SS Function Composition
.PP
\f[B](comp f g)\f[]
.PP
Right to left function composition.
.PP
\f[B](comp fs x)\f[]
.PP
Compose a list of functions \f[C]fs\f[], right to left, and apply the
resulting function to \f[C]x\f[].
.PP
\f[B](comp f g x)\f[]
.PP
Equivalent to \f[C](funcall\ (comp\ f\ g)\ x)\f[].
.PP
\f[B](comp fs)\f[]
.PP
Compose a list of functions \f[C]fs\f[] from right to left.
.PP
\f[B](comp)\f[]
.PP
Equivalent to \f[C]#\[aq]identity/1\f[].
.SS Usage
.PP
The following examples assume \f[C]#\[aq]1+/1\f[] is defined:
.IP
.nf
\f[C]
>\ (defun\ 1+\ (x)\ (+\ x\ 1))
1+
\f[]
.fi
.IP
.nf
\f[C]
>\ (funcall\ (clj:comp\ #\[aq]math:sin/1\ #\[aq]math:asin/1)\ 0.5)
0.49999999999999994
>\ (funcall\ (clj:comp\ (list\ #\[aq]1+/1\ #\[aq]math:sin/1\ #\[aq]math:asin/1)\ 0.5))
1.5
\f[]
.fi
.PP
Or used in another function call:
.IP
.nf
\f[C]
>\ (lists:filter\ (clj:comp\ #\[aq]not/1\ #\[aq]zero?/1)
\ \ \ \ \[aq](0\ 1\ 0\ 2\ 0\ 3\ 0\ 4))
(1\ 2\ 3\ 4)
\f[]
.fi
.PP
The usage above is best when \f[B]comp\f[] will be called by
higher\-order functions like \f[B]lists:foldl/3\f[] or
\f[B]lists:filter/2\f[], etc.
However, one may also call \f[B]comp\f[] in the following manner, best
suited for direct usage:
.IP
.nf
\f[C]
>\ (clj:comp\ #\[aq]math:sin/1\ #\[aq]math:asin/1\ 0.5)
0.49999999999999994
>\ (clj:comp\ (list\ #\[aq]1+/1\ #\[aq]math:sin/1\ #\[aq]math:asin/1)\ 0.5)
1.5
\f[]
.fi
.SS Partial Application
.PP
\f[B](partial f args)\f[]
.PP
\f[B](partial f arg\-1)\f[]
.PP
Partially apply \f[C]f\f[] to a given argument \f[C]arg\-1\f[] or list
of \f[C]args\f[].
.SS Usage
.IP
.nf
\f[C]
>\ (set\ f\ (clj:partial\ #\[aq]+/2\ 1))
#Fun<clj.3.121115395>
>\ (funcall\ f\ 2)
3
>\ (set\ f\ (clj:partial\ #\[aq]+/3\ 1))
#Fun<clj.3.121115395>
>\ (funcall\ f\ \[aq](2\ 3))
6
>\ (set\ f\ (clj:partial\ #\[aq]+/3\ \[aq](2\ 3)))
#Fun<clj.3.121115395>
>\ (funcall\ f\ 4)
9
>\ (set\ f\ (clj:partial\ #\[aq]+/4\ \[aq](2\ 3)))
#Fun<clj.3.121115395>
>\ (funcall\ f\ \[aq](4\ 5))
14
\f[]
.fi
.PP
Note that to partially apply a function that expects a list, you must
wrap said list into a (singleton) list.
.IP
.nf
\f[C]
>\ (set\ double\ (clj:partial\ #\[aq]*/2\ 2))
#Fun<clj.5.16146786>
>\ (set\ f\ (clj:partial\ #\[aq]lists:map/2\ double))
#Fun<clj.5.16146786>
>\ (funcall\ f\ \[aq]((1\ 2\ 3)))
(2\ 4\ 6)
\f[]
.fi
.SS Predicate Functions
.PP
N.B.
These functions may \f[I]not\f[] be used in guards.
.PP
\f[B](string? data)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]data\f[] is a flat list of printable
characters.
.PP
\f[B](unicode? data)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]data\f[] is a flat list of printable
Unicode characters.
.PP
\f[B](list? data)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]data\f[] is a list and not a string.
.PP
\f[B](set? data)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]data\f[] is appears to be a (possibly
ordered) set.
.PP
\f[B](dict? data)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]data\f[] is a dictionary.
.PP
\f[B](proplist? lst)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]lst\f[] is a list where
\f[B]proplist\-kv?/1\f[] returns \f[C]\[aq]true\f[] for all elements in
\f[C]lst\f[].
.PP
\f[B](proplist\-kv? data)\f[]
.PP
Return \f[C]\[aq]true\f[] if a \f[C]data\f[] is a key/value tuple or an
atom.
.PP
\f[B](queue? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is a queue.
.PP
\f[B](empty? x)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]x\f[] is the empty list, tuple, map,
dictionary, queue, or general balanced tree.
.PP
\f[B](every? pred lst)\f[]
.PP
\f[B](all? pred lst)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C](pred\ x)\f[] returns
\f[C]\[aq]true\f[] for every \f[C]x\f[] in \f[C]lst\f[].
.PP
\f[B](any? pred lst)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C](pred\ x)\f[] returns
\f[C]\[aq]true\f[] for any \f[C]x\f[] in \f[C]lst\f[].
.PP
\f[B](not\-any? pred lst)\f[]
.PP
Return \f[C]\[aq]false\f[] if \f[C](pred\ x)\f[] returns
\f[C]\[aq]true\f[] for any \f[C]x\f[] in \f[C]lst\f[].
.PP
\f[B](element? elem data)\f[]
.PP
Return \f[C]\[aq]true\f[] if \f[C]elem\f[] is an element of
\f[C]data\f[], where \f[C]data\f[] is a list, set or ordset.
.SS Sequence Functions
.PP
\f[B](seq end)\f[]
.PP
Equivalent to \f[C](seq\ 1\ end)\f[].
.PP
\f[B](seq start end)\f[]
.PP
Equivalent to \f[C](seq\ start\ end\ 1)\f[].
.PP
\f[B](seq start end step)\f[]
.PP
Return a sequence of integers, starting with \f[C]start\f[], containing
the successive results of adding \f[C]step\f[] to the previous element,
until \f[C]end\f[] has been reached or password.
In the latter case, \f[C]end\f[] is not an element of the sequence.
.PP
\f[B](next func)\f[]
.PP
Equivalent to \f[C](next\ func\ 1\ 1)\f[].
.PP
\f[B](next func start)\f[]
.PP
Equivalent to \f[C](next\ func\ start\ 1)\f[].
.PP
\f[B](next func start step)\f[]
.PP
Return a nullary function that returns a cons cell with \f[C]start\f[]
as the head and a nullary function,
\f[C](next\ func\ (funcall\ func\ start\ step)\ step)\f[] as the tail.
The result can be treated as a (possibly infinite) lazy list, which only
computes subseqeuent values as needed.
.PP
\f[B](lazy\-seq seq)\f[]
.PP
Return a lazy sequence (possibly infinite) from given lazy sequence
\f[C]seq\f[] or finite lazy sequence from given list \f[C]seq\f[].
Lazy sequence is treated as finite if at any iteration it produces empty
list instead of data as its head and nullary function for next iteration
as its tail.
.PP
\f[B](cycle lst)\f[]
.PP
Return a lazy infinite sequence with all elements from a given list
\f[C]lst\f[] or another lazy sequence cycled.
.PP
See \f[B]next/3\f[] for details on the structure.
.PP
\f[B](range)\f[]
.PP
Equivalent to \f[C](range\ 1\ 1)\f[].
.PP
\f[B](range start)\f[]
.PP
Equivalent to \f[C](range\ start\ 1)\f[].
.PP
\f[B](range start step)\f[]
.PP
Return a lazy list of integers, starting with \f[C]start\f[] and
increasing by \f[C]step\f[].
Equivalent to \f[C](next\ #\[aq]+/2\ start\ step)\f[].
See also: \f[B]next/3\f[].
.PP
\f[B](drop n lst)\f[]
.PP
\f[B](drop \[aq]all lst)\f[]
.PP
Return a list of all but the first \f[C]n\f[] elements in \f[C]lst\f[].
If \f[C]n\f[] is the atom \f[C]all\f[], return the empty list.
.PP
\f[B](take n lst)\f[]
.PP
\f[B](take \[aq]all lst)\f[]
.PP
Given a (possibly lazy) list \f[C]lst\f[], return a list of the first
\f[C]n\f[] elements of \f[C]lst\f[], or all elements if there are fewer
than \f[C]n\f[].
If \f[C]n\f[] is the atom \f[C]all\f[] and \f[C]lst\f[] is a "normal"
list, return \f[C]lst\f[].
.PP
\f[B](split\-at n lst)\f[]
.PP
Return a tuple of \f[C]`#(,(take\ n\ lst)\ ,(drop\ n\ lst))\f[].
.PP
\f[B](partition n lst)\f[]
.PP
Equivalent to \f[C](partition\ n\ n\ lst)\f[].
.PP
\f[B](partition n step lst)\f[]
.PP
Equivalent to \f[C](partition\ n\ step\ ()\ lst)\f[].
.PP
\f[B](partition n step pad lst)\f[]
.PP
Return a list of lists of \f[C]n\f[] items each, at offsets
\f[C]step\f[] apart.
Use the elements of \f[C]pad\f[] as necessary to complete the last
partition up to \f[C]n\f[] elements.
In case there are not enough padding elements, return a parition with
less than \f[C]n\f[] items.
.PP
\f[B](partition\-all n lst)\f[]
.PP
Equivalent to \f[C](partition\-all\ n\ n\ lst)\f[].
.PP
\f[B](partition\-all n step lst)\f[]
.PP
Return a list of lists like \f[B]partition/3\f[], possibly including
partitions with fewer than \f[C]n\f[] elements at the end.
.PP
\f[B](interleave list\-1 list\-2)\f[]
.PP
Return a list of the first element of each list, then the second, etc.
.PP
\f[B](get\-in data keys)\f[]
.PP
Equivalent to \f[C](get\-in\ data\ keys\ \[aq]undefined)\f[].
.PP
\f[B](get\-in data keys not\-found)\f[]
.PP
Return the value in a nested associative structure, where \f[C]keys\f[]
is a list of keys or list indices.
Return the atom \f[C]not\-found\f[] if the key is not present or index
is out of bounds, or the \f[C]not\-found\f[] value.
.PP
\f[B](reduce func (cons head tail))\f[]
.PP
Equivalent to \f[C](reduce\ func\ head\ tail)\f[].
.PP
\f[B](reduce func acc lst)\f[]
.PP
Equivalent to \f[C](lists:foldl\ func\ acc\ lst)\f[].
.PP
\f[B](repeat x)\f[]
.PP
Return a lazy infinite sequence of \f[C]x\f[]s.
.PP
See \f[B]next/3\f[] for details on the structure.
.PP
\f[B](repeat n f)\f[]
.PP
Given a nullary function \f[C]f\f[], return a list of \f[C]n\f[]
applications of \f[C]f\f[].
.PP
\f[B](repeat n x)\f[]
.PP
Given a term \f[C]x\f[], return a list of \f[C]n\f[] copies of
\f[C]x\f[].
.SS Other Functions
.PP
\f[B](identity x)\f[]
.PP
Identity function.
.PP
\f[B](constantly x)\f[]
.PP
Return a unary function that returns \f[C]x\f[].
N.B.
This is like Haskell\[aq]s \f[C]const\f[] rather than Clojure\[aq]s
\f[C]constantly\f[].
.PP
\f[B](inc x)\f[]
.PP
Increment \f[C]x\f[] by 1.
.PP
\f[B](dec x)\f[]
.PP
Decrement \f[C]x\f[] by 1.
.SH AUTHORS
Tim Dysinger, Duncan McGreggor, Eric Bailey.
